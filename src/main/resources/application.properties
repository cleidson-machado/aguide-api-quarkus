quarkus.datasource.db-kind=postgresql
quarkus.hibernate-orm.sql-load-script=import.sql
quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.sql-load-script-phase=after-create
# quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/quarkus_db
# quarkus.datasource.jdbc.url=jdbc:postgresql://212.85.10.159:5432/quarkus_db
quarkus.datasource.jdbc.url=${QUARKUS_DATASOURCE_JDBC_URL:jdbc:postgresql://localhost:5432/quarkus_db}

# quarkus.datasource.username=quarkus
quarkus.datasource.username=${QUARKUS_DATASOURCE_USERNAME:quarkus}

# quarkus.datasource.password=quarkus123
quarkus.datasource.password=${QUARKUS_DATASOURCE_PASSWORD:quarkus123}

quarkus.hibernate-orm.log.sql=true

# Habilita o CORS
quarkus.http.cors=true

# Permite que qualquer origem (*) se conecte.
# ï¿½timo para desenvolvimento, mas seja mais especï¿½fico em produï¿½ï¿½o!
quarkus.http.cors.origins=*

# Permite os metodos HTTP que seu app Flutter usa
quarkus.http.cors.methods=GET,PUT,POST,DELETE

# Permite os headers que seu app Flutter envia
quarkus.http.cors.headers=accept,authorization,content-type,x-requested-with

# Habilita a porta SSL (HTTPS)
# quarkus.http.ssl.port=8443

# Faz o Quarkus escutar em todas as interfaces de rede - Usado nos testes com VPS
quarkus.http.host=0.0.0.0

# Apenas para evitar conflito com outros serviï¿½os que vocï¿½ possa ter rodando
quarkus.http.port=8083

# Apenas para evitar conflito com outros serviï¿½os que vocï¿½ possa ter rodando
# Pode usar essse tambï¿½m para forï¿½ar redirecionamento de HTTP para HTTPS
# quarkus.http.insecure-requests=disabled

# Aponta para o keystore que vocï¿½ acabou de criar
# quarkus.http.ssl.certificate.key-store-file=security/keystore.p12

# Informa a senha do keystore
# quarkus.http.ssl.certificate.key-store-password=quarkus

# Adicionado apenas para o teste de automatização no VPS44 - Zera o Banco de Dados a cada reinicio